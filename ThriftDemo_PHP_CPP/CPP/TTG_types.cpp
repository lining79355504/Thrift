/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "TTG_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace TTG {

int _kResponseStateValues[] = {
  ResponseState::StateOk,
  ResponseState::StateError,
  ResponseState::StateEmpty
};
const char* _kResponseStateNames[] = {
  "StateOk",
  "StateError",
  "StateEmpty"
};
const std::map<int, const char*> _ResponseState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kResponseStateValues, _kResponseStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


Request::~Request() throw() {
}


void Request::__set_studentID(const int32_t val) {
  this->studentID = val;
}

const char* Request::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t Request::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->studentID);
          this->__isset.studentID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Request");

  xfer += oprot->writeFieldBegin("studentID", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->studentID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Request &a, Request &b) {
  using ::std::swap;
  swap(a.studentID, b.studentID);
  swap(a.__isset, b.__isset);
}

Request::Request(const Request& other0) {
  studentID = other0.studentID;
  __isset = other0.__isset;
}
Request& Request::operator=(const Request& other1) {
  studentID = other1.studentID;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Request& obj) {
  using apache::thrift::to_string;
  out << "Request(";
  out << "studentID=" << to_string(obj.studentID);
  out << ")";
  return out;
}


Response::~Response() throw() {
}


void Response::__set_studentID(const int32_t val) {
  this->studentID = val;
}

void Response::__set_name(const std::string& val) {
  this->name = val;
}

void Response::__set_infos(const std::vector<std::string> & val) {
  this->infos = val;
}

void Response::__set_state(const ResponseState::type val) {
  this->state = val;
}

const char* Response::ascii_fingerprint = "CA7C80F5BEC1F67BCC3A44C30F41FE47";
const uint8_t Response::binary_fingerprint[16] = {0xCA,0x7C,0x80,0xF5,0xBE,0xC1,0xF6,0x7B,0xCC,0x3A,0x44,0xC3,0x0F,0x41,0xFE,0x47};

uint32_t Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->studentID);
          this->__isset.studentID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->infos.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->infos.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += iprot->readString(this->infos[_i6]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.infos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast7;
          xfer += iprot->readI32(ecast7);
          this->state = (ResponseState::type)ecast7;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Response");

  xfer += oprot->writeFieldBegin("studentID", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->studentID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("infos", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->infos.size()));
    std::vector<std::string> ::const_iterator _iter8;
    for (_iter8 = this->infos.begin(); _iter8 != this->infos.end(); ++_iter8)
    {
      xfer += oprot->writeString((*_iter8));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Response &a, Response &b) {
  using ::std::swap;
  swap(a.studentID, b.studentID);
  swap(a.name, b.name);
  swap(a.infos, b.infos);
  swap(a.state, b.state);
  swap(a.__isset, b.__isset);
}

Response::Response(const Response& other9) {
  studentID = other9.studentID;
  name = other9.name;
  infos = other9.infos;
  state = other9.state;
  __isset = other9.__isset;
}
Response& Response::operator=(const Response& other10) {
  studentID = other10.studentID;
  name = other10.name;
  infos = other10.infos;
  state = other10.state;
  __isset = other10.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Response& obj) {
  using apache::thrift::to_string;
  out << "Response(";
  out << "studentID=" << to_string(obj.studentID);
  out << ", " << "name=" << to_string(obj.name);
  out << ", " << "infos=" << to_string(obj.infos);
  out << ", " << "state=" << to_string(obj.state);
  out << ")";
  return out;
}

} // namespace
