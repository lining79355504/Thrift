/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TTG_TYPES_H
#define TTG_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace TTG {

struct ResponseState {
  enum type {
    StateOk = 0,
    StateError = 1,
    StateEmpty = 2
  };
};

extern const std::map<int, const char*> _ResponseState_VALUES_TO_NAMES;

class Request;

class Response;

typedef struct _Request__isset {
  _Request__isset() : studentID(true) {}
  bool studentID :1;
} _Request__isset;

class Request {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  Request(const Request&);
  Request& operator=(const Request&);
  Request() : studentID(0) {
  }

  virtual ~Request() throw();
  int32_t studentID;

  _Request__isset __isset;

  void __set_studentID(const int32_t val);

  bool operator == (const Request & rhs) const
  {
    if (!(studentID == rhs.studentID))
      return false;
    return true;
  }
  bool operator != (const Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Request& obj);
};

void swap(Request &a, Request &b);

typedef struct _Response__isset {
  _Response__isset() : studentID(true), name(false), infos(false), state(false) {}
  bool studentID :1;
  bool name :1;
  bool infos :1;
  bool state :1;
} _Response__isset;

class Response {
 public:

  static const char* ascii_fingerprint; // = "CA7C80F5BEC1F67BCC3A44C30F41FE47";
  static const uint8_t binary_fingerprint[16]; // = {0xCA,0x7C,0x80,0xF5,0xBE,0xC1,0xF6,0x7B,0xCC,0x3A,0x44,0xC3,0x0F,0x41,0xFE,0x47};

  Response(const Response&);
  Response& operator=(const Response&);
  Response() : studentID(0), name(), state((ResponseState::type)0) {
  }

  virtual ~Response() throw();
  int32_t studentID;
  std::string name;
  std::vector<std::string>  infos;
  ResponseState::type state;

  _Response__isset __isset;

  void __set_studentID(const int32_t val);

  void __set_name(const std::string& val);

  void __set_infos(const std::vector<std::string> & val);

  void __set_state(const ResponseState::type val);

  bool operator == (const Response & rhs) const
  {
    if (!(studentID == rhs.studentID))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(infos == rhs.infos))
      return false;
    if (!(state == rhs.state))
      return false;
    return true;
  }
  bool operator != (const Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Response& obj);
};

void swap(Response &a, Response &b);

} // namespace

#endif
